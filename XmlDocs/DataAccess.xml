<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataAccess</name>
    </assembly>
    <members>
        <member name="T:DataAccess.EncodeJobDAOMockAlive">
            <summary>
            Mock data accessor object with a "live" repo attached.
            </summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.AddEncodeJobToQueue(DataObjects.EncodeJob)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.MarkEncodeJobCheckedOut(System.Guid,System.Nullable{System.DateTime})">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.MarkEncodeJobCheckedOut(DataObjects.EncodeJob,System.Nullable{System.DateTime})">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.MarkJobCompletedStatus(System.Guid,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.MarkJobCompletedStatus(DataObjects.EncodeJob,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.RemoveEncodeJobFromQueue(System.Guid)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.RetrieveCompleteEncodeJobs">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.RetrieveEncodeJob(System.Guid)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.RetrieveIncompleteEncodeJobs">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.RetrieveIncompleteEncodeJobs(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockAlive.UpdateJob(DataObjects.EncodeJob,DataObjects.EncodeJob)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.EncodeJobDAOMockBadDb">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.AddEncodeJobToQueue(DataObjects.EncodeJob)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.MarkEncodeJobCheckedOut(System.Guid,System.Nullable{System.DateTime})">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.MarkEncodeJobCheckedOut(DataObjects.EncodeJob,System.Nullable{System.DateTime})">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.MarkJobCompletedStatus(System.Guid,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.MarkJobCompletedStatus(DataObjects.EncodeJob,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.RemoveEncodeJobFromQueue(System.Guid)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.RetrieveCompleteEncodeJobs">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.RetrieveEncodeJob(System.Guid)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.RetrieveIncompleteEncodeJobs">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.RetrieveIncompleteEncodeJobs(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMockBadDb.UpdateJob(DataObjects.EncodeJob,DataObjects.EncodeJob)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.EncodeJobDAOMongo">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.AddEncodeJobToQueue(DataObjects.EncodeJob)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.MarkEncodeJobCheckedOut(DataObjects.EncodeJob,System.Nullable{System.DateTime})">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.MarkEncodeJobCheckedOut(System.Guid,System.Nullable{System.DateTime})">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.MarkJobCompletedStatus(System.Guid,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.MarkJobCompletedStatus(DataObjects.EncodeJob,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.RemoveEncodeJobFromQueue(System.Guid)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.RetrieveIncompleteEncodeJobs">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.RetrieveIncompleteEncodeJobs(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.RetrieveEncodeJob(System.Guid)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.RetrieveCompleteEncodeJobs">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.UpdateJob(DataObjects.EncodeJob,DataObjects.EncodeJob)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOMongo.RetrieveCompleteEncodeJobsByVideoName(System.String)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.EncodeJobDAOmssql">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.AddEncodeJobToQueue(DataObjects.EncodeJob)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.RemoveEncodeJobFromQueue(System.Guid)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.RetrieveCompleteEncodeJobs">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.RetrieveIncompleteEncodeJobs">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.RetrieveIncompleteEncodeJobs(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.MarkEncodeJobCheckedOut(System.Guid,System.Nullable{System.DateTime})">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.MarkEncodeJobCheckedOut(DataObjects.EncodeJob,System.Nullable{System.DateTime})">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.MarkJobCompletedStatus(System.Guid,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.MarkJobCompletedStatus(DataObjects.EncodeJob,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.RetrieveEncodeJob(System.Guid)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.EncodeJobDAOmssql.UpdateJob(DataObjects.EncodeJob,DataObjects.EncodeJob)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.IEncodeJobDAO">
            <summary>
            Entry point for EncodeJob related database operations
            </summary>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.AddEncodeJobToQueue(DataObjects.EncodeJob)">
            <summary>
            Adds an encode job to the queue of pending encodes.
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.RemoveEncodeJobFromQueue(System.Guid)">
            <summary>
            I don't exactly know what this is supposed to do
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.RetrieveCompleteEncodeJobs">
            <summary>
            Gets the collection of all completed encode jobs from database
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.RetrieveIncompleteEncodeJobs">
            <summary>
            Gets the collection of all incompleted encode jobs from database
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.RetrieveIncompleteEncodeJobs(System.Int32)">
            <summary>
            Gets the collection of all incompleted encode jobs from database
            that match a certain priority
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.MarkEncodeJobCheckedOut(System.Guid,System.Nullable{System.DateTime})">
            <summary>
            Changes the passed in jobs status to "Checked out", implying that
            the job is currently in progress or undergoing interrim evaluation.
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.MarkEncodeJobCheckedOut(DataObjects.EncodeJob,System.Nullable{System.DateTime})">
            <summary>
            Changes the passed in jobs status to "Checked out at X time", implying that
            the job is currently in progress or undergoing interrim evaluation.
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.MarkJobCompletedStatus(System.Guid,System.Boolean)">
            <summary>
            Changes the passed in jobs status to "Checked out at X time", implying that
            the job is currently in progress or undergoing interrim evaluation.
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.MarkJobCompletedStatus(DataObjects.EncodeJob,System.Boolean)">
            <summary>
            Marks a designated encode job as completed
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.RetrieveEncodeJob(System.Guid)">
            <summary>
            Gets the matching encode job for specified GUID
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.UpdateJob(DataObjects.EncodeJob,DataObjects.EncodeJob)">
            <summary>
            Update/overwrite the data for a job
            </summary>
        </member>
        <member name="M:DataAccess.IEncodeJobDAO.RetrieveCompleteEncodeJobsByVideoName(System.String)">
            <summary>
            Gets a list of completed jobs with a certain video name
            </summary>
            <exception cref="T:DataAccess.Exceptions.BadConnectionStringException">
            Throws if:
            	- Database connection times out
            </exception>
        </member>
        <member name="T:DataAccess.Exceptions.BadConnectionStringException">
            <summary></summary>
        </member>
        <member name="P:DataAccess.Exceptions.BadConnectionStringException.ConnectionString">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.BadConnectionStringException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.BadConnectionStringException.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.BadConnectionStringException.#ctor(System.String,System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.BadConnectionStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.Exceptions.DatabaseConnectionException">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.DatabaseConnectionException.#ctor">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.DatabaseConnectionException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.DatabaseConnectionException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.DatabaseConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.Exceptions.JobAlreadyExistsException">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.JobAlreadyExistsException.#ctor">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.JobAlreadyExistsException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.JobAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.Exceptions.JobAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.GoodFakeFileAccessor">
            <summary>
            Basic good returns
            </summary>
        </member>
        <member name="M:DataAccess.GoodFakeFileAccessor.DeleteFile(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.GoodFakeFileAccessor.DoesFileExist(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.GoodFakeFileAccessor.DoesFolderExist(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.GoodFakeFileAccessor.GetFilesInFolder(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.GoodFakeFileAccessor.GetFileSize(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.GoodFakeFileAccessor.MoveFile(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.IFileAccessor">
            <summary>
            Interface specifying basic, non-logical file based behavior/functionality
            </summary>
        </member>
        <member name="M:DataAccess.IFileAccessor.DoesFileExist(System.String)">
            <summary>
            If the file path leads to an existing file.
            </summary>
        </member>
        <member name="M:DataAccess.IFileAccessor.MoveFile(System.String,System.String)">
            <summary>
            Moves a file
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if:
                - The old path to the file is invalid or the file is not found
            </exception>
            <exception cref="T:DataAccess.Exceptions.FileAlreadyExistsException">
            Thrown if:
                - The path that the file is going to be move to is already occupied
            </exception>
        </member>
        <member name="M:DataAccess.IFileAccessor.DeleteFile(System.String)">
            <summary>
            Deletes a file
            </summary>
        </member>
        <member name="M:DataAccess.IFileAccessor.DoesFolderExist(System.String)">
            <summary>
            If the folder path leads to an existing folder.
            </summary>
        </member>
        <member name="M:DataAccess.IFileAccessor.GetFilesInFolder(System.String)">
            <summary>
            Returns the full paths of all files in a folder
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            Thrown if:
                - The path to the folder is invalid or the folder is not found
            </exception>
        </member>
        <member name="M:DataAccess.IFileAccessor.GetFileSize(System.String)">
            <summary>
            Returns the size in bytes of the specified file
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if:
                - The path to the file is invalid or the file is not found
            </exception>
        </member>
        <member name="T:DataAccess.RealFileAccessor">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealFileAccessor.DeleteFile(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealFileAccessor.DoesFileExist(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealFileAccessor.DoesFolderExist(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealFileAccessor.GetFilesInFolder(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealFileAccessor.GetFileSize(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealFileAccessor.MoveFile(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.TestingCombineSuccessFakeFileAccessor">
            <summary>
            For testing purposes
            </summary>
        </member>
        <member name="M:DataAccess.TestingCombineSuccessFakeFileAccessor.DeleteFile(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.TestingCombineSuccessFakeFileAccessor.DoesFileExist(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.TestingCombineSuccessFakeFileAccessor.DoesFolderExist(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.TestingCombineSuccessFakeFileAccessor.GetFilesInFolder(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.TestingCombineSuccessFakeFileAccessor.GetFileSize(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.TestingCombineSuccessFakeFileAccessor.MoveFile(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.IVideoAccessor">
            <summary>
            Generic video related data operations interface
            </summary>
        </member>
        <member name="M:DataAccess.IVideoAccessor.AnalyzeVideoInput(System.String)">
            <summary>
            Verifies input exists, runs input through ffmpeg scene change
            detection, uses resulting timestamp set to analyze scenes and returns the 
            collection of all scenes.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if:
                - The video input does not exist
            </exception>
        </member>
        <member name="M:DataAccess.IVideoAccessor.ConcatVideosIntoOneOutput(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Combines multiple videos into a single video in order
            </summary>
        </member>
        <member name="M:DataAccess.IVideoAccessor.GetVideoDuration(System.String)">
            <summary>
            Uses ffprobe to get the duration for a specified video
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">
            Thrown if:
                - videoPath doesn't exist.
            </exception>
        </member>
        <member name="M:DataAccess.IVideoAccessor.GetVmaf(System.String,System.String)">
            <summary>
            Gets vmaf using ffmpeg from a source and path
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws if:
                - Either path does not exist
            </exception>
        </member>
        <member name="M:DataAccess.IVideoAccessor.GetVmafScene(System.String,System.String,System.Double,System.Double)">
            <summary>
            Gets vmaf using ffmpeg piping to ffmpeg from a source and path
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws if:
                - Either path does not exist
            </exception>
        </member>
        <member name="T:DataAccess.MockVideoAccessor">
            <summary></summary>
        </member>
        <member name="P:DataAccess.MockVideoAccessor.TestScenes">
            <summary></summary>
        </member>
        <member name="M:DataAccess.MockVideoAccessor.AnalyzeVideoInput(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.MockVideoAccessor.ConcatVideosIntoOneOutput(System.Collections.Generic.List{System.String},System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.MockVideoAccessor.GetVideoDuration(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.MockVideoAccessor.GetVmaf(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.MockVideoAccessor.GetVmafScene(System.String,System.String,System.Double,System.Double)">
            <summary></summary>
        </member>
        <member name="T:DataAccess.RealVideoAccessor">
            <summary>
            Accessor for generic video functions. Currently linux dependent
            </summary>
        </member>
        <member name="M:DataAccess.RealVideoAccessor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a video accessor with the supplied paths
            </summary>
        </member>
        <member name="M:DataAccess.RealVideoAccessor.AnalyzeVideoInput(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealVideoAccessor.ConcatVideosIntoOneOutput(System.Collections.Generic.List{System.String},System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealVideoAccessor.GetVideoDuration(System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealVideoAccessor.GetVmaf(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:DataAccess.RealVideoAccessor.GetVmafScene(System.String,System.String,System.Double,System.Double)">
            <summary></summary>
        </member>
    </members>
</doc>
