<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AppLogic</name>
    </assembly>
    <members>
        <member name="T:AppLogic.AppConfigManager">
            <summary>
            Holds/gets globally used strings for the application
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="M:AppLogic.AppConfigManager.SetConfig(System.String)">
            <summary>
            Sets the config instance to whatever is found at the path, or throws
            an exception if there is nothing at the end of the path or the file
            is not compatible. Also resets the EncodeJobManager instance.
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.InputBucketPath">
            <summary>
            The path/location of the directory where files will be placed 
            for the app to ingest and then process.
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.ProcessedBucketPath">
            <summary>
            The path/location of the directory where files will be placed
            after their jobs have been ingested by the app and they are 
            awaiting their turn to be encoded in the queue.
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.ActiveBucketPath">
            <summary>
            The path/location of the directory where directories will be placed
            jobs are being performed and they need a directory to be perforemed
            in.
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.CompletedBucketPath">
            <summary>
            The path/location of the directory where files will be placed
            after their job is completed and the encode is ready to be exported
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.LogFilePath">
            <summary>
            The path and filename of the file app logs will be placed
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.DBTypeAndString">
            <summary>
            The type of datastore to use and the connection string or file
            name of that data store.
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.MaxRunningLocalJobs">
            <summary>
            The maximum number of running jobs the system can withstand.
            </summary>
        </member>
        <member name="P:AppLogic.AppConfigManager.FailedBucketPath">
            <summary>
            The path/location of the directory where directories will be placed
            when their job has reached its max number of attempts but the job
            did not meet the requirements.
            </summary>
        </member>
        <member name="P:AppLogic.XMLAppConfigReader.ConfigFileChanged">
            <summary>
            Check if the config file was changed to enable the use of cached values.
            </summary>
            <returns>If the file was changed since last check.</returns>
        </member>
        <member name="T:AppLogic.EncodeJobManager">
            <summary>
            Logical encode job operations
            </summary>
        </member>
        <member name="F:AppLogic.EncodeJobManager._logger">
            <summary>
            For logging purposes
            </summary>
        </member>
        <member name="P:AppLogic.EncodeJobManager.Instance">
            <summary>Pointer for manager operations</summary>
        </member>
        <member name="M:AppLogic.EncodeJobManager.ImproveQuality(DataObjects.EncodeJob)">
            <summary>
            Improves the quality of a job by altering command line arguments
            </summary>
            <todo>This isn't even close to being done</todo>
        </member>
        <member name="M:AppLogic.EncodeJobManager.GetGuidFromWorkingDirectory(System.String)">
            <summary>
            Gets the guid from a designated working directory, passing back an empty if the directory 
            is found/exists but does not translate to a guid.
            </summary>
            <todo>Move to accessor of some kind</todo>
        </member>
        <member name="M:AppLogic.EncodeJobManager.SetLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Passes a logger into the manager for logging purposes
            </summary>
        </member>
        <member name="M:AppLogic.EncodeJobManager.AddEncodeJobToQueue(DataObjects.EncodeJob)">
            <summary>
            Adds an encode job to the database queue to await encoding.
            </summary>
            <param name="job">The job to be added to the database queue.</param>
            <returns>If the operation was a success.</returns>
            <remarks>Should this generate and return a guid for guidless jobs?</remarks>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - Database becomes unreachable
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if:
                - Job to add to the database is invalid
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.FindEncodeJob(System.Guid)">
            <summary>
            Searches the database for a job with the matching GUID, and if its unable to find
            it, returns null instead.
            </summary>
            <param name="id">The GUID to search the database for.</param>
            <returns>The encode job pulled from the database queue that matches the GUID, or 
            null if no matching jobs are found.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - Database becomes unreachable
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.MarkJobComplete(DataObjects.EncodeJob,System.Boolean)">
            <summary>
            Changes the completion state of a job in the database.
            </summary>
            <todo>Ensure that CompletedTime property is properly implemented.</todo>
            <param name="job">The job that should be marked as completed or not.</param>
            <param name="completedStatus">The new status of the job.</param>
            <returns>If the operation was a success.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - database becomes unreachable
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.MarkJobComplete(System.Guid,System.Boolean)">
            <summary>
            Changes the completion state of a job in the database.
            </summary>
            <todo>Ensure that CompletedTime property is properly implemented.</todo>
            <param name="id">The Id of the job to mark completion for.</param>
            <param name="completedStatus">The new status of the job.</param>
            <returns>If the operation was a success.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - database becomes unreachable
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.MarkJobCheckedOut(DataObjects.EncodeJob,System.Boolean)">
            <summary>
            Marks a jobs checked out time in the database, and if successful sets
            the job objects checked out to the appropriate time.
            </summary>
            <param name="job">The job object that needs its status changed</param>
            <param name="checkedOutStatus">The new checked out status of the job</param>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - database becomes unreachable
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.MarkJobCheckedOut(System.Guid,System.Boolean)">
            <summary>
            Marks a jobs checked out state in the database.
            </summary>
            <param name="id">The Id of the job to mark completion for.</param>
            <param name="checkedOutStatus">The new checked out status of the job</param>
            <returns>If the operation was a success.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - database becomes unreachable
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.UpdateJob(DataObjects.EncodeJob,DataObjects.EncodeJob)">
            <summary>
            Updates a job's information in the database, but not completed or checked out time.
            </summary>
            <param name="oldJob">The old job information, current in the database.</param>
            <param name="job">The new information to use for the job</param>
            <returns>If the operation was a success.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - database becomes unreachable
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.GetIncompleteUncheckedOutEncodeJobs(System.Int32)">
            <summary>
            Gets all jobs that are not completed and not checked out residing in the database.
            </summary>
            <returns>Generic collection of jobs, or an empty colletion if there are none.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - Database becomes unreachable
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if:
                - If the priority is out of range.
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.GetIncompleteUncheckedOutEncodeJobs">
            <summary>
            Gets all jobs that are not completed and not checked out residing in the database.
            </summary>
            <returns>Generic collection of jobs, or an empty colletion if there are none.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - database becomes unreachable
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.GetIncompleteEncodeJobs(System.Int32)">
            <summary>
            Gets all jobs that are not completed residing in the database.
            </summary>
            <returns>Generic collection of jobs, or an empty colletion if there are none.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - database becomes unreachable
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if:
                - If the priority is out of range.
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.GetIncompleteEncodeJobs">
            <summary>
            Gets all jobs that are not completed residing in the database.
            </summary>
            <returns>Generic collection of jobs, or an empty colletion if there are none.</returns>
            <exception cref="T:System.ApplicationException">
            Thrown if:
                - database becomes unreachable
            </exception>
        </member>
        <member name="M:AppLogic.EncodeJobManager.GetJobsByVideoName(System.String)">
            <summary>
            Gets all jobs that have a mtching video name in the database
            </summary>
            <returns>Collection of jobs, or an empty collection if there are none</returns>
        </member>
        <member name="T:AppLogic.Encoders.EncoderHevcFfmpeg">
            <summary>
            Single pass ffmpeg based libaom encoder implementation
            </summary>
        </member>
        <member name="M:AppLogic.Encoders.EncoderHevcFfmpeg.Encode(DataObjects.EncodeJob,System.String)">
            <summary></summary>
        </member>
        <member name="T:AppLogic.Encoders.EncoderLibaomFfmpeg">
            <summary>
            Single pass ffmpeg based libaom encoder implementation
            </summary>
        </member>
        <member name="M:AppLogic.Encoders.EncoderLibaomFfmpeg.Encode(DataObjects.EncodeJob,System.String)">
            <summary></summary>
        </member>
        <member name="T:AppLogic.Encoders.IEncoder">
            <summary>
            Interface that an encoder is required to implement
            </summary>
        </member>
        <member name="M:AppLogic.Encoders.IEncoder.Encode(DataObjects.EncodeJob,System.String)">
            <summary>
            Encodes the specified job, returning the new filename of the encode if successful,
            or null if unsuccessful.
            </summary>
        </member>
        <member name="T:AppLogic.EncoderManager">
            <summary>
            Encoding related logic operations
            </summary>
        </member>
        <member name="P:AppLogic.EncoderManager.Instance">
            <summary>
            Instance used for actual logical operations of the publicly available methods
            </summary>
        </member>
        <member name="M:AppLogic.EncoderManager.Combine(DataObjects.EncodeJob[],System.String)">
            <summary>
            Combines the resulting output from 
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown if:
                - Any of the jobs are not marked as completed
                - Jobs don't have an InputInterval
                - Jobs that have a video source that doesn't match the first video
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            Thrown if:
                - A job is found which is marked as completed but does not have a directory in the
                completed bucket.
            </exception>
        </member>
        <member name="M:AppLogic.EncoderManager.StartJob(DataObjects.EncodeJob,System.String)">
            <summary>
            Opens an encoder and starts encoding a specified job
            </summary>
        </member>
        <member name="M:AppLogic.RealEncodeJobManager.PrintDB">
            Helper for using the logger
        </member>
        <member name="T:AppLogic.VideoManager">
            <summary>
            Generic video related logic operations
            </summary>
        </member>
        <member name="M:AppLogic.VideoManager.AnalyzeScenes(DataObjects.Scene[])">
            <summary>
            Mushes scenes together based on desired speed/efficiency/accuracy/
            precision.
            </summary>
            <param name="sceneData">The scenes to mush together.</param>
        </member>
        <member name="M:AppLogic.VideoManager.MeetsCriteria(DataObjects.Scene)">
            <summary>
            If the scene 
            </summary>
            <todo>Should be adding a 'criteria' object of some kind as
            a param.</todo>
        </member>
        <member name="M:AppLogic.VideoManager.GetScenesFromVideo(System.String)">
            <summary>
            Converts a video into timestamped scenes that match criteria
            </summary>
        </member>
    </members>
</doc>
